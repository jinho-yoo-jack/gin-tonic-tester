// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/jinho-yoo-jack/gin-tonic-tester/config"
	"github.com/jinho-yoo-jack/gin-tonic-tester/handler"
	"github.com/jinho-yoo-jack/gin-tonic-tester/internal/middlewares"
	"github.com/jinho-yoo-jack/gin-tonic-tester/internal/utils"
	"github.com/jinho-yoo-jack/gin-tonic-tester/repository"
	"github.com/jinho-yoo-jack/gin-tonic-tester/routes"
	"github.com/jinho-yoo-jack/gin-tonic-tester/server"
	"github.com/jinho-yoo-jack/gin-tonic-tester/service"
)

// Injectors from wire.go:

func InitializeServer() (*server.Server, error) {
	configConfig := config.MustLoadConfig()
	db := config.InitDB(configConfig)
	handlerFunc := middlewares.NewAuthorizeMiddleware(configConfig)
	userRepository := repository.NewUserRepository(db)
	jwtUtils := utils.NewJwtUtils(configConfig)
	userService := service.NewUserService(userRepository, jwtUtils)
	userHandler := handler.NewUserHandler(userService)
	userRouters := routes.NewUserRouters(userHandler)
	client := config.InitMinio()
	minioRepository := repository.NewMinioRepository(client)
	minioService := service.NewMinioService(minioRepository)
	minioHandler := handler.NewMinioHandler(minioService)
	minioRouters := routes.NewMinioRouters(minioHandler)
	allRouters := routes.NewAllOfRouters(userRouters, minioRouters)
	serverServer, err := server.NewServer(configConfig, db, handlerFunc, allRouters)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

// wire.go:

var ConfigSet = wire.NewSet(config.MustLoadConfig, config.InitDB, config.InitMinio, utils.NewJwtUtils)

var MiddlewareSet = wire.NewSet(middlewares.NewAuthorizeMiddleware)
